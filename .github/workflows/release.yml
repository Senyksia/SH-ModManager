# Bump project version numbers, build ModManager.dll, draft a release with notes from CHANGELOG.md, and publish to NuGet
name: Draft Release
run-name: Draft Release (${{ inputs.bump_size }})

on:
  workflow_dispatch:
    inputs:
      bump_size:
        description: Amount to bump version by
        required: true
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  bump:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Bump ModManager.csproj
      id: bump_project
      uses: vers-one/dotnet-project-version-updater@v1
      with:
        file: ModManager/ModManager.csproj
        version: |
          ${{ inputs.bump_size == 'major' && '^.0.0'
           || inputs.bump_size == 'minor' && '?.^.0'
           || inputs.bump_size == 'patch' && '?.?.^' }}

    - name: Bump Metadata.cs
      run: sed -i "s/${{ steps.bump_project.outputs.oldVersion }}/${{ steps.bump_project.outputs.newVersion }}/" ModManager/Metadata.cs

    - name: Bump CHANGELOG.md
      uses: thomaseizinger/keep-a-changelog-new-release@v1
      with:
        tag: v${{ steps.bump_project.outputs.newVersion }}

    - name: Initialize mandatory git config
      run: |
        git config user.name "GitHub Actions"
        git config user.email noreply@github.com

    - name: Commit and push
      run: |
        git add ModManager/ModManager.csproj ModManager/Metadata.cs CHANGELOG.md
        git commit -m "bump: v${{ steps.bump_project.outputs.oldVersion }} â†’ v${{ steps.bump_project.outputs.newVersion }}"
        git tag -a v${{ steps.bump_project.outputs.newVersion }} -m "Automatic release tag"
        git push origin main --tags

    outputs:
      old_version: ${{ steps.bump_project.outputs.oldVersion }}
      new_version: ${{ steps.bump_project.outputs.newVersion }}

  build:
    needs: [bump]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: main # Override workflow SHA, so checkout includes bump commit

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v3
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
      with:
        dotnet-version: 7.x

    - name: Install SpiderHeck assemblies
      run: |
        dotnet lib/DepotDownloader/DepotDownloader.dll -app 1329500 -depot 1329501 -os windows -osarch 64 -username ${{ secrets.STEAM_USERNAME }} -password ${{ secrets.STEAM_PASSWORD }} -filelist game_assemblies.txt -dir SpiderHeck
        mkdir -p ModManager/lib
        mv SpiderHeck/SpiderHeckApp_Data/Managed/* ModManager/lib

    - name: Publish
      run: dotnet publish -c Release -p:PublishDir=../artifacts

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ModManager-${{ needs.bump.outputs.new_version }}
        path: artifacts/ModManager.dll
        if-no-files-found: error

  release:
    needs: [bump, build]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: main # Override workflow SHA, so checkout includes bump commit

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v3
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
      with:
        dotnet-version: 7.x

    - name: Extract release notes
      id: extract_release_notes
      uses: ffurrer2/extract-release-notes@v1

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: ModManager-${{ needs.bump.outputs.new_version }}
        path: artifacts/BepInEx/plugins

    - name: Compress artifact
      run: (cd artifacts && zip -r ModManager.zip BepInEx)

    - name: Draft release
      uses: ncipollo/release-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        body: ${{ steps.extract_release_notes.outputs.release_notes }}
        tag: v${{ needs.bump.outputs.new_version }}
        artifacts: artifacts/ModManager.zip
        artifactErrorsFailBuild: true
        draft: true

    - name: Pack and push to NuGet
      run: |
        dotnet pack -c Release -p:PackageReleaseNotes="${{ steps.extract_release_notes.outputs.release_notes }}" -o artifacts
        dotnet nuget push artifacts/senyksia.spiderheck.modmanager.${{ needs.bump.outputs.new_version }}.nupkg -s https://api.nuget.org/v3/index.json -k ${{ secrets.NUGET_API_KEY }}
